{"version":3,"sources":["StackItem.tsx"],"names":["StackItem","handleOpen","props","scene","onTransitionEnd","onOpenRoute","route","handleClose","onCloseRoute","handleTransitionStart","closing","onTransitionStart","onPageChangeConfirm","onPageChangeCancel","onGoBack","index","layout","active","focused","current","state","previousScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","cardTransparent","cardOverlayEnabled","cardShadowEnabled","cardStyle","onPageChangeStart","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","floatingHeaderHeight","headerShown","getPreviousRoute","headerMode","headerTransparent","renderHeader","renderScene","gestureDirection","transitionSpec","cardStyleInterpolator","headerStyleInterpolator","insets","top","right","bottom","left","progress","next","marginTop","StyleSheet","absoluteFill","styles","container","mode","scenes","styleInterpolator","React","PureComponent","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { StackNavigationState } from '@react-navigation/routers';\nimport { Route } from '@react-navigation/core';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport {\n  StackNavigationHelpers,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  current: Animated.Value<number>;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardTransparent?: boolean;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onGoBack: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  floatingHeaderHeight: number;\n};\n\nexport default class StackItem extends React.PureComponent<Props> {\n  private handleOpen = () => {\n    const { scene, onTransitionEnd, onOpenRoute } = this.props;\n\n    onTransitionEnd && onTransitionEnd({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  private handleClose = () => {\n    const { scene, onTransitionEnd, onCloseRoute } = this.props;\n\n    onTransitionEnd && onTransitionEnd({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  private handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    const {\n      scene,\n      onTransitionStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGoBack,\n    } = this.props;\n\n    if (closing) {\n      onPageChangeConfirm && onPageChangeConfirm();\n    } else {\n      onPageChangeCancel && onPageChangeCancel();\n    }\n\n    onTransitionStart && onTransitionStart({ route: scene.route }, closing);\n    closing && onGoBack({ route: scene.route });\n  };\n\n  render() {\n    const {\n      index,\n      layout,\n      active,\n      focused,\n      closing,\n      current,\n      state,\n      scene,\n      previousScene,\n      safeAreaInsetTop,\n      safeAreaInsetRight,\n      safeAreaInsetBottom,\n      safeAreaInsetLeft,\n      cardTransparent,\n      cardOverlayEnabled,\n      cardShadowEnabled,\n      cardStyle,\n      onPageChangeStart,\n      onPageChangeCancel,\n      gestureEnabled,\n      gestureResponseDistance,\n      gestureVelocityImpact,\n      floatingHeaderHeight,\n      headerShown,\n      getPreviousRoute,\n      headerMode,\n      headerTransparent,\n      renderHeader,\n      renderScene,\n      gestureDirection,\n      transitionSpec,\n      cardStyleInterpolator,\n      headerStyleInterpolator,\n    } = this.props;\n\n    const insets = {\n      top: safeAreaInsetTop,\n      right: safeAreaInsetRight,\n      bottom: safeAreaInsetBottom,\n      left: safeAreaInsetLeft,\n    };\n\n    return (\n      <Card\n        index={index}\n        active={active}\n        transparent={cardTransparent}\n        gestureDirection={gestureDirection}\n        layout={layout}\n        insets={insets}\n        current={current}\n        next={scene.progress.next}\n        closing={closing}\n        onOpen={this.handleOpen}\n        onClose={this.handleClose}\n        overlayEnabled={cardOverlayEnabled}\n        shadowEnabled={cardShadowEnabled}\n        onTransitionStart={this.handleTransitionStart}\n        onGestureBegin={onPageChangeStart}\n        onGestureCanceled={onPageChangeCancel}\n        gestureEnabled={gestureEnabled}\n        gestureResponseDistance={gestureResponseDistance}\n        gestureVelocityImpact={gestureVelocityImpact}\n        transitionSpec={transitionSpec}\n        styleInterpolator={cardStyleInterpolator}\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        pointerEvents=\"box-none\"\n        containerStyle={\n          headerMode === 'float' && !headerTransparent && headerShown !== false\n            ? { marginTop: floatingHeaderHeight }\n            : null\n        }\n        contentStyle={cardStyle}\n        style={StyleSheet.absoluteFill}\n      >\n        <View style={styles.container}>\n          <View style={styles.scene}>\n            {renderScene({ route: scene.route })}\n          </View>\n          {headerMode === 'screen'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                insets,\n                scenes: [previousScene, scene],\n                state,\n                getPreviousRoute,\n                styleInterpolator: headerStyleInterpolator,\n              })\n            : null}\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}