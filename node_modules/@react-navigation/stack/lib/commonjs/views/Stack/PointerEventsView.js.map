{"version":3,"sources":["PointerEventsView.tsx"],"names":["MIN_PROGRESS","TRUE","FALSE","NOOP","block","Animated","greaterThan","cond","set","call","onChange","PointerEventsView","pointerEventsEnabled","Value","props","active","exec","progress","value","setPointerEventsEnabled","Boolean","enabled","pointerEvents","root","setNativeProps","prevProps","setValue","rest","c","React","Component"],"mappings":"8+BAAA,oDACA,yCACA,sF,sHAUA,GAAMA,CAAAA,YAAY,CAAG,IAArB,CAEA,GAAMC,CAAAA,IAAI,CAAG,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAd,CACA,GAAMC,CAAAA,IAAI,CAAG,CAAb,C,GAEQC,CAAAA,K,CAAkDC,8B,CAAlDD,K,CAAOE,W,CAA2CD,8B,CAA3CC,W,CAAaC,I,CAA8BF,8B,CAA9BE,I,CAAMC,G,CAAwBH,8B,CAAxBG,G,CAAKC,I,CAAmBJ,8B,CAAnBI,I,CAAMC,Q,CAAaL,8B,CAAbK,Q,IAMxBC,CAAAA,iB,8dAQXC,oB,CAAuB,GAAIP,gCAASQ,KAAb,CAC7B,MAAKC,KAAL,CAAWC,MAAX,CAAoBd,IAApB,CAA2BC,KADE,C,OAIvBc,I,CAAOZ,KAAK,CAAC,CACnBG,IAAI,CACFD,WAAW,CAAC,MAAKQ,KAAL,CAAWG,QAAZ,CAAsBjB,YAAtB,CADT,CAEFO,IAAI,CACF,MAAKK,oBADH,CAEFT,IAFE,CAGFK,GAAG,CAAC,MAAKI,oBAAN,CAA4BX,IAA5B,CAHD,CAFF,CAOFM,IAAI,CAAC,MAAKK,oBAAN,CAA4BJ,GAAG,CAAC,MAAKI,oBAAN,CAA4BV,KAA5B,CAA/B,CAPF,CADe,CAUnBQ,QAAQ,CACN,MAAKE,oBADC,CAENH,IAAI,CAAC,CAAC,MAAKG,oBAAN,CAAD,CAA8B,cAAa,+CAAXM,KAAW,UAC7C,MAAKC,uBAAL,CAA6BC,OAAO,CAAC,MAAKN,KAAL,CAAWC,MAAX,EAAqBG,KAAtB,CAApC,EACD,CAFG,CAFE,CAVW,CAAD,C,OAkBZC,uB,CAA0B,SAACE,OAAD,CAAsB,CACtD,GAAMC,CAAAA,aAAa,CAAGD,OAAO,CAAG,UAAH,CAAgB,MAA7C,CAEA,MAAKE,IAAL,EAAa,MAAKA,IAAL,CAAUC,cAAV,CAAyB,CAAEF,aAAa,CAAbA,aAAF,CAAzB,CAAb,CACD,C,OAEOC,I,CAAoB,I,wHAnCTE,S,CAAkB,CACnC,GAAI,KAAKX,KAAL,CAAWC,MAAX,GAAsBU,SAAS,CAACV,MAApC,CAA4C,CAC1C,KAAKH,oBAAL,CAA0Bc,QAA1B,CAAmC,KAAKZ,KAAL,CAAWC,MAAX,CAAoBd,IAApB,CAA2BC,KAA9D,EACA,KAAKiB,uBAAL,CAA6B,KAAKL,KAAL,CAAWC,MAAxC,EACD,CACF,C,uCAgCQ,iCAE+B,KAAKD,KAFpC,CAECC,MAFD,aAECA,MAFD,CAESE,QAFT,aAESA,QAFT,CAEsBU,IAFtB,0EAIP,MACE,qBAAC,KAAD,CAAO,QAAP,kDACE,oBAAC,8BAAD,CAAU,IAAV,EAAe,IAAI,CAAE,KAAKX,IAA1B,iDADF,CAEE,oBAAC,iBAAD,wBAAM,GAAG,CAAE,aAAAY,CAAC,QAAK,CAAA,MAAI,CAACL,IAAL,CAAYK,CAAjB,EAAZ,EAAqCD,IAArC,mDAFF,CADF,CAMD,C,+BAhD4CE,KAAK,CAACC,S","sourcesContent":["import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\ntype Binary = 0 | 1;\n\ntype Props = ViewProps & {\n  active: boolean;\n  progress: Animated.Node<number>;\n  children: React.ReactNode;\n};\n\nconst MIN_PROGRESS = 0.99;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\n\nconst { block, greaterThan, cond, set, call, onChange } = Animated;\n\n/**\n * Component that automatically computes the `pointerEvents` property\n * whenever position changes.\n */\nexport default class PointerEventsView extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.active !== prevProps.active) {\n      this.pointerEventsEnabled.setValue(this.props.active ? TRUE : FALSE);\n      this.setPointerEventsEnabled(this.props.active);\n    }\n  }\n\n  private pointerEventsEnabled = new Animated.Value<Binary>(\n    this.props.active ? TRUE : FALSE\n  );\n\n  private exec = block([\n    cond(\n      greaterThan(this.props.progress, MIN_PROGRESS),\n      cond(\n        this.pointerEventsEnabled,\n        NOOP,\n        set(this.pointerEventsEnabled, TRUE)\n      ),\n      cond(this.pointerEventsEnabled, set(this.pointerEventsEnabled, FALSE))\n    ),\n    onChange(\n      this.pointerEventsEnabled,\n      call([this.pointerEventsEnabled], ([value]) => {\n        this.setPointerEventsEnabled(Boolean(this.props.active && value));\n      })\n    ),\n  ]);\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.root && this.root.setNativeProps({ pointerEvents });\n  };\n\n  private root: View | null = null;\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { active, progress, ...rest } = this.props;\n\n    return (\n      <React.Fragment>\n        <Animated.Code exec={this.exec} />\n        <View ref={c => (this.root = c)} {...rest} />\n      </React.Fragment>\n    );\n  }\n}\n"]}