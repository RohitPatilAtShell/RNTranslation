{"version":3,"sources":["Card.tsx"],"names":["TRUE","TRUE_NODE","Animated","Value","FALSE","FALSE_NODE","NOOP_NODE","UNSET","UNSET_NODE","MINUS_ONE_NODE","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","GESTURE_VELOCITY_IMPACT","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","abs","add","block","call","cond","divide","eq","greaterThan","lessThan","max","min","multiply","neq","onChange","set","spring","sub","timing","startClock","stopClock","clockRunning","Clock","memoizedSpring","proc","springHelper","finished","velocity","position","time","prevPosition","toValue","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","clock","state","config","transformSpringConfigToAnimatedValues","transformTimingConfigToAnimatedValues","duration","easing","Card","isVisible","nextIsVisible","isClosing","noAnimationStartedSoFar","isRunningAnimation","direction","props","gestureDirection","layout","width","height","gestureVelocityImpact","openingSpecConfig","transitionSpec","open","animation","closingSpecConfig","close","distance","gestureUntraversed","gesture","offset","velocityUntraversed","gestureState","isSwiping","isSwipeCancelled","isSwipeGesture","frameTime","transitionVelocity","transitionState","current","handleStartInteraction","interactionHandle","undefined","InteractionManager","createInteractionHandle","handleEndInteraction","clearInteractionHandle","handleTransitionEnd","interpolatedStyle","getInterpolatedStyle","styleInterpolator","index","next","insets","top","right","bottom","left","runTransition","openingSpec","closingSpec","value","onTransitionStart","closing","isOpen","Boolean","onOpen","onClose","extrapolatedPosition","exec","I18nManager","isRTL","execNoGesture","execWithGesture","onGestureBegin","onGestureEnd","onGestureCanceled","GestureState","ACTIVE","CANCELLED","handleGestureEventHorizontal","event","nativeEvent","translationX","velocityX","handleGestureEventVertical","translationY","velocityY","insetTop","insetRight","insetBottom","insetLeft","progress","layouts","screen","gestureRef","React","createRef","prevProps","setValue","requestAnimationFrame","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","minOffsetX","maxDeltaY","active","transparent","overlayEnabled","shadowEnabled","gestureEnabled","children","customContainerStyle","containerStyle","contentStyle","rest","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","styles","overlay","container","gestureActivationCriteria","shadow","shadowHorizontal","shadowVertical","content","opaque","Component","defaultProps","Platform","OS","StyleSheet","create","flex","overflow","absoluteFillObject","backgroundColor","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  I18nManager,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport PointerEventsView from './PointerEventsView';\nimport memoize from '../../utils/memoize';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  Layout,\n  SpringConfig,\n  TimingConfig,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  active: boolean;\n  closing?: boolean;\n  transparent?: boolean;\n  next?: Animated.Node<number>;\n  current: Animated.Value<number>;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: 'horizontal' | 'vertical';\n  onOpen: (isFinished: boolean) => void;\n  onClose: (isFinished: boolean) => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\ntype AnimatedSpringConfig = {\n  damping: Animated.Value<number>;\n  mass: Animated.Value<number>;\n  stiffness: Animated.Value<number>;\n  restSpeedThreshold: Animated.Value<number>;\n  restDisplacementThreshold: Animated.Value<number>;\n  overshootClamping: Animated.Value<boolean>;\n};\n\nexport type AnimatedTimingConfig = {\n  duration: Animated.Value<number>;\n  easing: Animated.EasingFunction;\n};\n\ntype Binary = 0 | 1;\n\nconst TRUE = 1;\nconst TRUE_NODE = new Animated.Value(TRUE);\nconst FALSE = 0;\nconst FALSE_NODE = new Animated.Value(FALSE);\nconst NOOP_NODE = FALSE_NODE;\nconst UNSET = -1;\nconst UNSET_NODE = new Animated.Value(UNSET);\n\nconst MINUS_ONE_NODE = UNSET_NODE;\n\nconst DIRECTION_VERTICAL = -1;\nconst DIRECTION_HORIZONTAL = 1;\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst {\n  abs,\n  add,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  onChange,\n  set,\n  spring,\n  sub,\n  timing,\n  startClock,\n  stopClock,\n  clockRunning,\n  Clock,\n  Value,\n} = Animated;\n\n// We need to be prepared for both version of reanimated. With and w/out proc\nlet memoizedSpring = spring;\n\nif (Animated.proc) {\n  const springHelper = Animated.proc(\n    (\n      finished: Animated.Value<number>,\n      velocity: Animated.Value<number>,\n      position: Animated.Value<number>,\n      time: Animated.Value<number>,\n      prevPosition: Animated.Value<number>,\n      toValue: Animated.Adaptable<number>,\n      damping: Animated.Adaptable<number>,\n      mass: Animated.Adaptable<number>,\n      stiffness: Animated.Adaptable<number>,\n      overshootClamping: Animated.Adaptable<number>,\n      restSpeedThreshold: Animated.Adaptable<number>,\n      restDisplacementThreshold: Animated.Adaptable<number>,\n      clock: Animated.Clock\n    ) =>\n      spring(\n        clock,\n        {\n          finished,\n          velocity,\n          position,\n          time,\n          // @ts-ignore\n          prevPosition,\n        },\n        {\n          toValue,\n          damping,\n          mass,\n          stiffness,\n          overshootClamping,\n          restDisplacementThreshold,\n          restSpeedThreshold,\n        }\n      )\n  );\n\n  // @ts-ignore\n  memoizedSpring = function(\n    clock: Animated.Clock,\n    state: {\n      finished: Animated.Value<number>;\n      velocity: Animated.Value<number>;\n      position: Animated.Value<number>;\n      time: Animated.Value<number>;\n    },\n    config: {\n      toValue: Animated.Adaptable<number>;\n      damping: Animated.Adaptable<number>;\n      mass: Animated.Adaptable<number>;\n      stiffness: Animated.Adaptable<number>;\n      overshootClamping: Animated.Adaptable<number>;\n      restSpeedThreshold: Animated.Adaptable<number>;\n      restDisplacementThreshold: Animated.Adaptable<number>;\n    }\n  ) {\n    return springHelper(\n      state.finished,\n      state.velocity,\n      state.position,\n      state.time,\n      new Value(0),\n      config.toValue,\n      config.damping,\n      config.mass,\n      config.stiffness,\n      config.overshootClamping,\n      config.restSpeedThreshold,\n      config.restDisplacementThreshold,\n      clock\n    );\n  };\n}\n\nfunction transformSpringConfigToAnimatedValues(\n  config: SpringConfig\n): AnimatedSpringConfig {\n  return {\n    damping: new Animated.Value(config.damping),\n    stiffness: new Animated.Value(config.stiffness),\n    mass: new Animated.Value(config.mass),\n    restDisplacementThreshold: new Animated.Value(\n      config.restDisplacementThreshold\n    ),\n    restSpeedThreshold: new Animated.Value(config.restSpeedThreshold),\n    overshootClamping: new Animated.Value(config.overshootClamping),\n  };\n}\n\nfunction transformTimingConfigToAnimatedValues(\n  config: TimingConfig\n): AnimatedTimingConfig {\n  return {\n    duration: new Animated.Value(config.duration),\n    easing: config.easing,\n  };\n}\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      layout,\n      gestureDirection,\n      gestureVelocityImpact,\n      closing,\n    } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureVelocityImpact !== prevProps.gestureVelocityImpact) {\n      this.gestureVelocityImpact.setValue(gestureVelocityImpact);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.direction.setValue(\n        gestureDirection === 'vertical'\n          ? DIRECTION_VERTICAL\n          : DIRECTION_HORIZONTAL\n      );\n    }\n\n    if (closing !== prevProps.closing) {\n      // If the style updates during render, setting the value here doesn't work\n      // We need to defer it a bit so the animation starts properly\n      requestAnimationFrame(() =>\n        requestAnimationFrame(() =>\n          this.isClosing.setValue(closing ? TRUE : FALSE)\n        )\n      );\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.handleEndInteraction();\n\n    // It might sometimes happen than animation will be unmounted\n    // during running. However, we need to invoke listener onClose\n    // manually in this case\n    if (this.isRunningAnimation || this.noAnimationStartedSoFar) {\n      this.props.onClose(false);\n    }\n  }\n\n  private isVisible = new Value<Binary>(TRUE);\n  private nextIsVisible = new Value<Binary | -1>(UNSET);\n\n  private isClosing = new Value<Binary>(FALSE);\n  private noAnimationStartedSoFar = true;\n  private isRunningAnimation = false;\n\n  private clock = new Clock();\n\n  private direction = new Value(\n    this.props.gestureDirection === 'vertical'\n      ? DIRECTION_VERTICAL\n      : DIRECTION_HORIZONTAL\n  );\n\n  private layout = {\n    width: new Value(this.props.layout.width),\n    height: new Value(this.props.layout.height),\n  };\n\n  private gestureVelocityImpact = new Value<number>(\n    this.props.gestureVelocityImpact\n  );\n\n  private openingSpecConfig =\n    this.props.transitionSpec.open.animation === 'timing'\n      ? transformTimingConfigToAnimatedValues(\n          this.props.transitionSpec.open.config\n        )\n      : transformSpringConfigToAnimatedValues(\n          this.props.transitionSpec.open.config\n        );\n\n  private closingSpecConfig =\n    this.props.transitionSpec.close.animation === 'timing'\n      ? transformTimingConfigToAnimatedValues(\n          this.props.transitionSpec.close.config\n        )\n      : transformSpringConfigToAnimatedValues(\n          this.props.transitionSpec.close.config\n        );\n\n  private distance = cond(\n    eq(this.direction, DIRECTION_VERTICAL),\n    this.layout.height,\n    this.layout.width\n  );\n\n  private gestureUntraversed = new Value(0);\n  private gesture = new Value(0);\n  private offset = new Value(0);\n  private velocityUntraversed = new Value(0);\n  private velocity = new Value(0);\n\n  private gestureState = new Value(0);\n\n  private isSwiping = new Value(FALSE);\n  private isSwipeCancelled = new Value(FALSE);\n  private isSwipeGesture = new Value(FALSE);\n\n  private toValue = new Value(0);\n  private frameTime = new Value(0);\n\n  private transitionVelocity = new Value(0);\n\n  private transitionState = {\n    position: this.props.current,\n    time: new Value(0),\n    finished: new Value(FALSE),\n  };\n\n  private interactionHandle: number | undefined;\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleTransitionEnd = () => {\n    this.handleEndInteraction();\n\n    this.isRunningAnimation = false;\n    this.interpolatedStyle = this.getInterpolatedStyle(\n      this.props.styleInterpolator,\n      this.props.index,\n      this.props.current,\n      this.props.next,\n      this.props.layout,\n      this.props.insets.top,\n      this.props.insets.right,\n      this.props.insets.bottom,\n      this.props.insets.left\n    );\n  };\n\n  private runTransition = (isVisible: Binary | Animated.Node<number>) => {\n    const { open: openingSpec, close: closingSpec } = this.props.transitionSpec;\n\n    return cond(eq(this.props.current, isVisible), NOOP_NODE, [\n      cond(clockRunning(this.clock), NOOP_NODE, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(this.toValue, isVisible),\n        // The velocity value is ideal for translating the whole screen\n        // But since we have 0-1 scale, we need to adjust the velocity\n        set(\n          this.transitionVelocity,\n          multiply(\n            cond(\n              this.distance,\n              divide(this.velocity, this.distance),\n              FALSE_NODE\n            ),\n            -1\n          )\n        ),\n        set(this.frameTime, FALSE_NODE),\n        set(this.transitionState.time, FALSE_NODE),\n        set(this.transitionState.finished, FALSE_NODE),\n        set(this.isVisible, isVisible),\n        startClock(this.clock),\n        call([this.isVisible], ([value]: ReadonlyArray<Binary>) => {\n          this.handleStartInteraction();\n\n          const { onTransitionStart } = this.props;\n          this.noAnimationStartedSoFar = false;\n          this.isRunningAnimation = true;\n          onTransitionStart && onTransitionStart({ closing: !value });\n        }),\n      ]),\n      cond(\n        eq(isVisible, TRUE_NODE),\n        openingSpec.animation === 'spring'\n          ? memoizedSpring(\n              this.clock,\n              { ...this.transitionState, velocity: this.transitionVelocity },\n              // @ts-ignore\n              {\n                ...(this.openingSpecConfig as AnimatedSpringConfig),\n                toValue: this.toValue,\n              }\n            )\n          : timing(\n              this.clock,\n              { ...this.transitionState, frameTime: this.frameTime },\n              {\n                ...(this.openingSpecConfig as AnimatedTimingConfig),\n                toValue: this.toValue,\n              }\n            ),\n        closingSpec.animation === 'spring'\n          ? memoizedSpring(\n              this.clock,\n              { ...this.transitionState, velocity: this.transitionVelocity },\n              // @ts-ignore\n              {\n                ...(this.closingSpecConfig as AnimatedSpringConfig),\n                toValue: this.toValue,\n              }\n            )\n          : timing(\n              this.clock,\n              { ...this.transitionState, frameTime: this.frameTime },\n              {\n                ...(this.closingSpecConfig as AnimatedTimingConfig),\n                toValue: this.toValue,\n              }\n            )\n      ),\n      cond(this.transitionState.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE_NODE),\n        set(this.gesture, FALSE_NODE),\n        set(this.velocity, FALSE_NODE),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isVisible], ([value]: ReadonlyArray<Binary>) => {\n          const isOpen = Boolean(value);\n          const { onOpen, onClose } = this.props;\n\n          this.handleTransitionEnd();\n\n          if (isOpen) {\n            onOpen(true);\n          } else {\n            onClose(true);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private extrapolatedPosition = add(\n    this.gesture,\n    multiply(this.velocity, this.gestureVelocityImpact)\n  );\n\n  private exec = [\n    set(\n      this.gesture,\n      cond(\n        eq(this.direction, DIRECTION_HORIZONTAL),\n        multiply(\n          this.gestureUntraversed,\n          I18nManager.isRTL ? MINUS_ONE_NODE : TRUE_NODE\n        ),\n        this.gestureUntraversed\n      )\n    ),\n    set(\n      this.velocity,\n      multiply(\n        this.velocityUntraversed,\n        I18nManager.isRTL ? MINUS_ONE_NODE : TRUE_NODE\n      )\n    ),\n    onChange(\n      this.isClosing,\n      cond(this.isClosing, set(this.nextIsVisible, FALSE_NODE))\n    ),\n    onChange(\n      this.nextIsVisible,\n      cond(neq(this.nextIsVisible, UNSET_NODE), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), [\n          call([], this.handleTransitionEnd),\n          stopClock(this.clock),\n        ]),\n        set(this.gesture, FALSE_NODE),\n        // Update the index to trigger the transition\n        set(this.isVisible, this.nextIsVisible),\n        set(this.nextIsVisible, UNSET_NODE),\n      ])\n    ),\n  ];\n\n  private execNoGesture = block([\n    ...this.exec,\n    this.runTransition(this.isVisible),\n  ]);\n\n  private execWithGesture = block([\n    ...this.exec,\n    onChange(\n      this.isSwiping,\n      call(\n        [this.isSwiping, this.isSwipeCancelled],\n        ([isSwiping, isSwipeCancelled]: readonly Binary[]) => {\n          const {\n            onGestureBegin,\n            onGestureEnd,\n            onGestureCanceled,\n          } = this.props;\n\n          if (isSwiping === TRUE) {\n            this.handleStartInteraction();\n\n            onGestureBegin && onGestureBegin();\n          } else {\n            this.handleEndInteraction();\n\n            if (isSwipeCancelled === TRUE) {\n              onGestureCanceled && onGestureCanceled();\n            } else {\n              onGestureEnd && onGestureEnd();\n            }\n          }\n        }\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP_NODE, [\n          // We weren't dragging before, set it to true\n          set(this.isSwipeCancelled, FALSE_NODE),\n          set(this.isSwiping, TRUE_NODE),\n          set(this.isSwipeGesture, TRUE_NODE),\n          // Also update the drag offset to the last position\n          set(this.offset, this.props.current),\n        ]),\n        // Update position with next offset + gesture distance\n        set(\n          this.props.current,\n          min(\n            max(\n              sub(\n                this.offset,\n                cond(\n                  this.distance,\n                  divide(\n                    cond(\n                      eq(this.direction, DIRECTION_HORIZONTAL),\n                      multiply(\n                        this.gestureUntraversed,\n                        I18nManager.isRTL ? MINUS_ONE_NODE : TRUE_NODE\n                      ),\n                      this.gestureUntraversed\n                    ),\n                    this.distance\n                  ),\n                  TRUE_NODE\n                )\n              ),\n              FALSE_NODE\n            ),\n            TRUE_NODE\n          )\n        ),\n        // Stop animations while we're dragging\n        cond(\n          clockRunning(this.clock),\n          call([], () => {\n            this.isRunningAnimation = false;\n          })\n        ),\n        stopClock(this.clock),\n      ],\n      [\n        set(\n          this.isSwipeCancelled,\n          eq(this.gestureState, GestureState.CANCELLED)\n        ),\n        set(this.isSwiping, FALSE_NODE),\n        this.runTransition(\n          cond(\n            greaterThan(\n              abs(this.extrapolatedPosition),\n              divide(this.distance, 2)\n            ),\n            cond(\n              lessThan(\n                cond(\n                  eq(this.velocity, FALSE_NODE),\n                  this.gesture,\n                  this.velocity\n                ),\n                FALSE_NODE\n              ),\n              TRUE_NODE,\n              FALSE_NODE\n            ),\n            this.isVisible\n          )\n        ),\n      ]\n    ),\n  ]);\n\n  private handleGestureEventHorizontal = Animated.event([\n    {\n      nativeEvent: {\n        translationX: this.gestureUntraversed,\n        velocityX: this.velocityUntraversed,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private handleGestureEventVertical = Animated.event([\n    {\n      nativeEvent: {\n        translationY: this.gestureUntraversed,\n        velocityY: this.velocityUntraversed,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  // We need to ensure that this style doesn't change unless absolutely needs to\n  // Changing it too often will result in huge frame drops due to detaching and attaching\n  // Changing it during an animations can result in unexpected results\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.Node<number>,\n      next: Animated.Node<number> | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the style in a property to avoid changing the animated node when deps change\n  // The style shouldn't change in the middle of the animation and should refer to what was there at the start of it\n  // Which will be the last value when just before the render which started the animation\n  // We need to make sure to update this when the running animation ends\n  private interpolatedStyle = this.getInterpolatedStyle(\n    this.props.styleInterpolator,\n    this.props.index,\n    this.props.current,\n    this.props.next,\n    this.props.layout,\n    this.props.insets.top,\n    this.props.insets.right,\n    this.props.insets.bottom,\n    this.props.insets.left\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical'\n        ? gestureResponseDistance &&\n          gestureResponseDistance.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance &&\n          gestureResponseDistance.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n\n      if (I18nManager.isRTL) {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef: React.Ref<PanGestureHandler> = React.createRef();\n\n  render() {\n    const {\n      active,\n      transparent,\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    if (!this.isRunningAnimation) {\n      this.interpolatedStyle = this.getInterpolatedStyle(\n        styleInterpolator,\n        index,\n        current,\n        next,\n        layout,\n        insets.top,\n        insets.right,\n        insets.bottom,\n        insets.left\n      );\n    }\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = this.interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? gestureDirection === 'vertical'\n        ? this.handleGestureEventVertical\n        : this.handleGestureEventHorizontal\n      : undefined;\n\n    return (\n      <StackGestureContext.Provider value={this.gestureRef}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          <Animated.Code\n            key={gestureEnabled ? 'gesture-code' : 'no-gesture-code'}\n            exec={gestureEnabled ? this.execWithGesture : this.execNoGesture}\n          />\n          {overlayEnabled && overlayStyle ? (\n            <Animated.View\n              pointerEvents=\"none\"\n              style={[styles.overlay, overlayStyle]}\n            />\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              ref={this.gestureRef}\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={handleGestureEvent}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !transparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? styles.shadowHorizontal\n                        : styles.shadowVertical,\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <PointerEventsView\n                  active={active}\n                  progress={this.props.current}\n                  style={[\n                    styles.content,\n                    transparent ? styles.transparent : styles.opaque,\n                    contentStyle,\n                  ]}\n                >\n                  {children}\n                </PointerEventsView>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </StackGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowVertical: {\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  transparent: {\n    backgroundColor: 'transparent',\n  },\n  opaque: {\n    backgroundColor: '#eee',\n  },\n});\n"]}