{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","keyboardHandlingEnabled","initialRouteName","children","screenOptions","rest","StackRouter","state","descriptors","navigation","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","props"],"mappings":"shBAAA,oDACA,4CAMA,kDAMA,iFACA,2E,i5BAWA,QAASA,CAAAA,cAAT,MAMU,IALRC,CAAAA,uBAKQ,MALRA,uBAKQ,CAJRC,gBAIQ,MAJRA,gBAIQ,CAHRC,QAGQ,MAHRA,QAGQ,CAFRC,aAEQ,MAFRA,aAEQ,CADLC,IACK,iJACmC,+BAKzCC,oBALyC,CAK5B,CACbJ,gBAAgB,CAAhBA,gBADa,CAEbC,QAAQ,CAARA,QAFa,CAGbC,aAAa,CAAbA,aAHa,CAL4B,CADnC,CACAG,KADA,uBACAA,KADA,CACOC,WADP,uBACOA,WADP,CACoBC,UADpB,uBACoBA,UADpB,CAYRC,KAAK,CAACC,SAAN,CACE,iBACEF,CAAAA,UAAU,CAACG,WAAX,EACAH,UAAU,CAACG,WAAX,CAAuB,UAAvB,CAAmC,SAACC,CAAD,CAA6B,CAC9D,GAAMC,CAAAA,SAAS,CAAGL,UAAU,CAACK,SAAX,EAAlB,CAIAC,qBAAqB,CAAC,UAAM,CAC1B,GAAIR,KAAK,CAACS,KAAN,CAAc,CAAd,EAAmBF,SAAnB,EAAgC,CAACD,CAAC,CAACI,gBAAvC,CAAyD,CAGvDR,UAAU,CAACS,QAAX,kBACKC,sBAAaC,QAAb,EADL,EAEEC,MAAM,CAAEd,KAAK,CAACe,GAFhB,IAID,CACF,CAToB,CAArB,CAUD,CAfD,CAFF,EADF,CAmBE,CAACb,UAAD,CAAaF,KAAK,CAACS,KAAnB,CAA0BT,KAAK,CAACe,GAAhC,CAnBF,EAsBA,MACE,qBAAC,wBAAD,EAAiB,OAAO,CAAErB,uBAAuB,GAAK,KAAtD,iDACG,SAAAsB,KAAK,QACJ,qBAAC,kBAAD,wBACE,KAAK,CAAEhB,KADT,CAEE,WAAW,CAAEC,WAFf,CAGE,UAAU,CAAEC,UAHd,EAIMJ,IAJN,CAKMkB,KALN,mDADI,EADR,CADF,CAaD,C,aAEc,iCAGbvB,cAHa,C","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n} from '@react-navigation/core';\nimport {\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/routers';\nimport KeyboardManager from '../views/KeyboardManager';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  keyboardHandlingEnabled,\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e: EventArg<'tabPress'>) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (state.index > 0 && isFocused && !e.defaultPrevented) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n      {props => (\n        <StackView\n          state={state}\n          descriptors={descriptors}\n          navigation={navigation}\n          {...rest}\n          {...props}\n        />\n      )}\n    </KeyboardManager>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationOptions,\n  typeof StackNavigator\n>(StackNavigator);\n"]}