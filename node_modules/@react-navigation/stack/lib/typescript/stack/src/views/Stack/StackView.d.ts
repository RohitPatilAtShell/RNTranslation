import * as React from 'react';
import { Route } from '@react-navigation/core';
import { StackNavigationState } from '@react-navigation/routers';
import { StackNavigationHelpers, StackNavigationConfig, StackDescriptorMap } from '../../types';
declare type Props = StackNavigationConfig & {
    state: StackNavigationState;
    navigation: StackNavigationHelpers;
    descriptors: StackDescriptorMap;
    onPageChangeStart?: () => void;
    onPageChangeConfirm?: () => void;
    onPageChangeCancel?: () => void;
};
declare type State = {
    routes: Route<string>[];
    previousRoutes: Route<string>[];
    previousDescriptors: StackDescriptorMap;
    openingRouteKeys: string[];
    closingRouteKeys: string[];
    replacingRouteKeys: string[];
    descriptors: StackDescriptorMap;
};
declare class StackView extends React.Component<Props, State> {
    static getDerivedStateFromProps(props: Readonly<Props>, state: Readonly<State>): {
        previousDescriptors: StackDescriptorMap;
        descriptors: StackDescriptorMap;
        routes?: undefined;
        previousRoutes?: undefined;
        openingRouteKeys?: undefined;
        closingRouteKeys?: undefined;
        replacingRouteKeys?: undefined;
    } | {
        routes: (Route<string> & {
            state?: import("../../../../core/src").NavigationState | import("../../../../core/src").PartialState<import("../../../../core/src").NavigationState> | undefined;
        })[];
        previousRoutes: (Route<string> & {
            state?: import("../../../../core/src").NavigationState | import("../../../../core/src").PartialState<import("../../../../core/src").NavigationState> | undefined;
        })[];
        previousDescriptors: StackDescriptorMap;
        openingRouteKeys: string[];
        closingRouteKeys: string[];
        replacingRouteKeys: string[];
        descriptors: StackDescriptorMap;
    } | null;
    state: State;
    private getGesturesEnabled;
    private getPreviousRoute;
    private renderScene;
    private renderHeader;
    private handleGoBack;
    private handleOpenRoute;
    private handleCloseRoute;
    render(): JSX.Element;
}
export default StackView;
