import * as React from 'react';
import Animated from 'react-native-reanimated';
import { EdgeInsets } from 'react-native-safe-area-context';
import { Route } from '@react-navigation/core';
import { StackNavigationState } from '@react-navigation/routers';
import { Props as HeaderContainerProps } from '../Header/HeaderContainer';
import { Layout, StackHeaderMode, Scene, StackDescriptorMap, StackNavigationHelpers } from '../../types';
declare type ProgressValues = {
    [key: string]: Animated.Value<number>;
};
declare type Props = {
    mode: 'card' | 'modal';
    insets: EdgeInsets;
    state: StackNavigationState;
    navigation: StackNavigationHelpers;
    descriptors: StackDescriptorMap;
    routes: Route<string>[];
    openingRouteKeys: string[];
    closingRouteKeys: string[];
    onGoBack: (props: {
        route: Route<string>;
    }) => void;
    onOpenRoute: (props: {
        route: Route<string>;
    }) => void;
    onCloseRoute: (props: {
        route: Route<string>;
    }) => void;
    getPreviousRoute: (props: {
        route: Route<string>;
    }) => Route<string> | undefined;
    getGesturesEnabled: (props: {
        route: Route<string>;
    }) => boolean;
    renderHeader: (props: HeaderContainerProps) => React.ReactNode;
    renderScene: (props: {
        route: Route<string>;
    }) => React.ReactNode;
    headerMode: StackHeaderMode;
    onPageChangeStart?: () => void;
    onPageChangeConfirm?: () => void;
    onPageChangeCancel?: () => void;
};
declare type State = {
    routes: Route<string>[];
    descriptors: StackDescriptorMap;
    scenes: Scene<Route<string>>[];
    progress: ProgressValues;
    layout: Layout;
    floatingHeaderHeights: Record<string, number>;
};
export default class Stack extends React.Component<Props, State> {
    static getDerivedStateFromProps(props: Props, state: State): {
        routes: Route<string>[];
        scenes: Scene<Route<string>>[];
        progress: ProgressValues;
        descriptors: StackDescriptorMap;
        floatingHeaderHeights: Record<string, number>;
    } | null;
    state: State;
    private handleLayout;
    private handleFloatingHeaderLayout;
    private handleTransitionStart;
    private handleTransitionEnd;
    render(): JSX.Element;
}
export {};
