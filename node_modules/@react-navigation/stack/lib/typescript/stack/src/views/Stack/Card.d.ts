import * as React from 'react';
import { ViewProps, StyleProp, ViewStyle } from 'react-native';
import Animated from 'react-native-reanimated';
import { EdgeInsets } from 'react-native-safe-area-context';
import { TransitionSpec, StackCardStyleInterpolator, Layout } from '../../types';
declare type Props = ViewProps & {
    index: number;
    active: boolean;
    closing?: boolean;
    transparent?: boolean;
    next?: Animated.Node<number>;
    current: Animated.Value<number>;
    layout: Layout;
    insets: EdgeInsets;
    gestureDirection: 'horizontal' | 'vertical';
    onOpen: (isFinished: boolean) => void;
    onClose: (isFinished: boolean) => void;
    onTransitionStart?: (props: {
        closing: boolean;
    }) => void;
    onGestureBegin?: () => void;
    onGestureCanceled?: () => void;
    onGestureEnd?: () => void;
    children: React.ReactNode;
    overlayEnabled: boolean;
    shadowEnabled: boolean;
    gestureEnabled: boolean;
    gestureResponseDistance?: {
        vertical?: number;
        horizontal?: number;
    };
    gestureVelocityImpact: number;
    transitionSpec: {
        open: TransitionSpec;
        close: TransitionSpec;
    };
    styleInterpolator: StackCardStyleInterpolator;
    containerStyle?: StyleProp<ViewStyle>;
    contentStyle?: StyleProp<ViewStyle>;
};
export declare type AnimatedTimingConfig = {
    duration: Animated.Value<number>;
    easing: Animated.EasingFunction;
};
export default class Card extends React.Component<Props> {
    static defaultProps: {
        overlayEnabled: boolean;
        shadowEnabled: boolean;
        gestureEnabled: boolean;
        gestureVelocityImpact: number;
    };
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    private isVisible;
    private nextIsVisible;
    private isClosing;
    private noAnimationStartedSoFar;
    private isRunningAnimation;
    private clock;
    private direction;
    private layout;
    private gestureVelocityImpact;
    private openingSpecConfig;
    private closingSpecConfig;
    private distance;
    private gestureUntraversed;
    private gesture;
    private offset;
    private velocityUntraversed;
    private velocity;
    private gestureState;
    private isSwiping;
    private isSwipeCancelled;
    private isSwipeGesture;
    private toValue;
    private frameTime;
    private transitionVelocity;
    private transitionState;
    private interactionHandle;
    private handleStartInteraction;
    private handleEndInteraction;
    private handleTransitionEnd;
    private runTransition;
    private extrapolatedPosition;
    private exec;
    private execNoGesture;
    private execWithGesture;
    private handleGestureEventHorizontal;
    private handleGestureEventVertical;
    private getInterpolatedStyle;
    private interpolatedStyle;
    private gestureActivationCriteria;
    private gestureRef;
    render(): JSX.Element;
}
export {};
