{"version":3,"sources":["StackView.tsx"],"names":["React","Platform","SafeAreaConsumer","StackActions","Stack","HeaderContainer","SafeAreaProviderCompat","StackView","state","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","getGesturesEnabled","route","descriptor","key","options","gestureEnabled","animationEnabled","undefined","OS","getPreviousRoute","filter","r","includes","index","findIndex","renderScene","props","render","renderHeader","handleGoBack","navigation","dispatch","pop","source","target","handleOpenRoute","setState","length","handleCloseRoute","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","mode","rest","headerMode","insets","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","find","splice","Error","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { Route } from '@react-navigation/core';\nimport { StackActions, StackNavigationState } from '@react-navigation/routers';\n\nimport Stack from './Stack';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nclass StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      const isAnimationEnabled = (route: Route<string>) => {\n        const descriptor =\n          props.descriptors[route.key] || state.descriptors[route.key];\n\n        return descriptor\n          ? descriptor.options.animationEnabled !== false\n          : true;\n      };\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            replacingRouteKeys = [\n              ...replacingRouteKeys,\n              previousFocusedRoute.key,\n            ];\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n            closingRouteKeys = closingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            // Keep the old route in state because it's visible under the new route, and removing it will feel abrupt\n            // We need to insert it just before the focused one (the route being pushed)\n            // After the push animation is completed, routes being replaced will be removed completely\n            routes = routes.slice();\n            routes.splice(routes.length - 1, 0, previousFocusedRoute);\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(\n          ({ key }) =>\n            replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(`There should always be at least one route.`);\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleGoBack = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    // This event will trigger when a gesture ends\n    // We need to perform the transition before removing the route completely\n    navigation.dispatch({\n      ...StackActions.pop(),\n      source: route.key,\n      target: state.key,\n    });\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    // This event will trigger when the animation for closing the route ends\n    // In this case, we need to clean up any state tracking the route and pop it immediately\n\n    // @ts-ignore\n    this.setState(state => ({\n      routes: state.routes.filter(r => r.key !== route.key),\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n    }));\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <SafeAreaProviderCompat>\n        <SafeAreaConsumer>\n          {insets => (\n            <Stack\n              mode={mode}\n              insets={insets as EdgeInsets}\n              getPreviousRoute={this.getPreviousRoute}\n              getGesturesEnabled={this.getGesturesEnabled}\n              routes={routes}\n              openingRouteKeys={openingRouteKeys}\n              closingRouteKeys={closingRouteKeys}\n              onGoBack={this.handleGoBack}\n              onOpenRoute={this.handleOpenRoute}\n              onCloseRoute={this.handleCloseRoute}\n              onPageChangeStart={onPageChangeStart}\n              onPageChangeConfirm={onPageChangeConfirm}\n              onPageChangeCancel={onPageChangeCancel}\n              renderHeader={this.renderHeader}\n              renderScene={this.renderScene}\n              headerMode={headerMode}\n              state={state}\n              navigation={navigation}\n              descriptors={descriptors}\n              {...rest}\n            />\n          )}\n        </SafeAreaConsumer>\n      </SafeAreaProviderCompat>\n    );\n  }\n}\n\nexport default StackView;\n"]}