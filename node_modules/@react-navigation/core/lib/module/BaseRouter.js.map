{"version":3,"sources":["BaseRouter.tsx"],"names":["shortid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","payload","name","params","map","route","i","undefined","shouldActionChangeFocus"],"mappings":"+0BAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CAOA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,iBADiB,4BAEfC,KAFe,CAGfC,MAHe,CAIqB,CACpC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,SAAL,CAAgB,CACd,GAAMC,CAAAA,KAAK,CAAGF,MAAM,CAACG,MAAP,CACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAuB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,GAAF,GAAUP,MAAM,CAACG,MAArB,EAAxB,CADU,CAEVJ,KAAK,CAACG,KAFV,CAIA,GAAIA,KAAK,GAAK,CAAC,CAAf,CAAkB,CAChB,MAAO,KAAP,CACD,CAPa,oBASgBF,MAAM,CAACQ,OATvB,CASNC,IATM,iBASNA,IATM,CASAF,GATA,iBASAA,GATA,CASKG,MATL,iBASKA,MATL,CAWd,wBACKX,KADL,EAEEK,MAAM,CAAEL,KAAK,CAACK,MAAN,CAAaO,GAAb,CAAiB,SAACC,KAAD,CAAQC,CAAR,QACvBA,CAAAA,CAAC,GAAKX,KAAN,CACI,CACEK,GAAG,CAAEA,GAAG,GAAKO,SAAR,CAAoBP,GAApB,CAA6BE,IAA7B,KAAqCb,OAAO,EADnD,CAEEa,IAAI,CAAJA,IAFF,CAGEC,MAAM,CAANA,MAHF,CADJ,CAMIE,KAPmB,EAAjB,CAFV,GAYD,CAED,IAAK,YAAL,CAAmB,CACjB,GAAMV,CAAAA,MAAK,CAAGF,MAAM,CAACG,MAAP,CACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAuB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,GAAF,GAAUP,MAAM,CAACG,MAArB,EAAxB,CADU,CAEVJ,KAAK,CAACG,KAFV,CAIA,GAAIA,MAAK,GAAK,CAAC,CAAf,CAAkB,CAChB,MAAO,KAAP,CACD,CAED,wBACKH,KADL,EAEEK,MAAM,CAAEL,KAAK,CAACK,MAAN,CAAaO,GAAb,CAAiB,SAACL,CAAD,CAAIO,CAAJ,QACvBA,CAAAA,CAAC,GAAKX,MAAN,kBACSI,CADT,EACYI,MAAM,kBAAOJ,CAAC,CAACI,MAAT,IAAoBV,MAAM,CAACQ,OAAP,CAAeE,MAAnC,CADlB,GAEIJ,CAHmB,EAAjB,CAFV,GAQD,CAED,IAAK,OAAL,CACE,MAAON,CAAAA,MAAM,CAACQ,OAAd,CAEF,QACE,MAAO,KAAP,CAjDJ,CAmDD,CAxDgB,CA0DjBO,uBA1DiB,kCA0DOf,MA1DP,CA0D6B,CAC5C,MAAOA,CAAAA,MAAM,CAACC,IAAP,GAAgB,UAAvB,CACD,CA5DgB,CAAnB,CA+DA,cAAeJ,CAAAA,UAAf","sourcesContent":["import shortid from 'shortid';\nimport { CommonAction, NavigationState, PartialState } from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'REPLACE': {\n        const index = action.source\n          ? state.routes.findIndex(r => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        const { name, key, params } = action.payload;\n\n        return {\n          ...state,\n          routes: state.routes.map((route, i) =>\n            i === index\n              ? {\n                  key: key !== undefined ? key : `${name}-${shortid()}`,\n                  name,\n                  params,\n                }\n              : route\n          ),\n        };\n      }\n\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex(r => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET':\n        return action.payload as PartialState<State>;\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]}