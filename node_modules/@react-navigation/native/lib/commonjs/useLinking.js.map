{"version":3,"sources":["useLinking.tsx"],"names":["useLinking","ref","prefixes","config","getStateFromPath","getStateFromPathDefault","prefixesRef","React","useRef","configRef","getStateFromPathRef","useEffect","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","Linking","getInitialURL","path","listener","navigation","state","resetRoot","addEventListener","removeEventListener"],"mappings":"2UAAA,oDACA,yCACA,4CA0Ce,QAASA,CAAAA,UAAT,CACbC,GADa,MAGb,IADEC,CAAAA,QACF,MADEA,QACF,CADYC,MACZ,MADYA,MACZ,4BADoBC,gBACpB,CADoBA,gBACpB,gCADuCC,sBACvC,uBAIA,GAAMC,CAAAA,WAAW,CAAGC,KAAK,CAACC,MAAN,CAAaN,QAAb,CAApB,CACA,GAAMO,CAAAA,SAAS,CAAGF,KAAK,CAACC,MAAN,CAAaL,MAAb,CAAlB,CACA,GAAMO,CAAAA,mBAAmB,CAAGH,KAAK,CAACC,MAAN,CAAaJ,gBAAb,CAA5B,CAEAG,KAAK,CAACI,SAAN,CAAgB,UAAM,CACpBL,WAAW,CAACM,OAAZ,CAAsBV,QAAtB,CACAO,SAAS,CAACG,OAAV,CAAoBT,MAApB,CACAO,mBAAmB,CAACE,OAApB,CAA8BR,gBAA9B,CACD,CAJD,CAIG,CAACD,MAAD,CAASC,gBAAT,CAA2BF,QAA3B,CAJH,EAMA,GAAMW,CAAAA,kBAAkB,CAAGN,KAAK,CAACO,WAAN,CAAkB,SAACC,GAAD,CAAiB,CAC5D,kBAAqBT,WAAW,CAACM,OAAjC,4IAA0C,0IAA/BI,CAAAA,OAA+B,OACxC,GAAID,GAAG,CAACE,UAAJ,CAAeD,OAAf,CAAJ,CAA4B,CAC1B,MAAOD,CAAAA,GAAG,CAACG,OAAJ,CAAYF,OAAZ,CAAoB,EAApB,CAAP,CACD,CACF,CAED,MAAOG,CAAAA,SAAP,CACD,CAR0B,CAQxB,EARwB,CAA3B,CAUA,GAAMC,CAAAA,eAAe,CAAGb,KAAK,CAACO,WAAN,CAAkB,oMACtBO,qBAAQC,aAAR,EADsB,SAClCP,GADkC,eAElCQ,IAFkC,CAE3BR,GAAG,CAAGF,kBAAkB,CAACE,GAAD,CAArB,CAA6B,IAFL,KAIpCQ,IAJoC,yDAK/Bb,mBAAmB,CAACE,OAApB,CAA4BW,IAA5B,CAAkCd,SAAS,CAACG,OAA5C,CAL+B,yCAO/BO,SAP+B,gDAAlB,CASrB,CAACN,kBAAD,CATqB,CAAxB,CAWAN,KAAK,CAACI,SAAN,CAAgB,UAAM,CACpB,GAAMa,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAA8B,IAA3BT,CAAAA,GAA2B,OAA3BA,GAA2B,CAC7C,GAAMQ,CAAAA,IAAI,CAAGV,kBAAkB,CAACE,GAAD,CAA/B,CACA,GAAMU,CAAAA,UAAU,CAAGxB,GAAG,CAACW,OAAvB,CAEA,GAAIa,UAAU,EAAIF,IAAlB,CAAwB,CACtB,GAAMG,CAAAA,KAAK,CAAGhB,mBAAmB,CAACE,OAApB,CAA4BW,IAA5B,CAAkCd,SAAS,CAACG,OAA5C,CAAd,CAEA,GAAIc,KAAJ,CAAW,CACTD,UAAU,CAACE,SAAX,CAAqBD,KAArB,EACD,CACF,CACF,CAXD,CAaAL,qBAAQO,gBAAR,CAAyB,KAAzB,CAAgCJ,QAAhC,EAEA,MAAO,kBAAMH,sBAAQQ,mBAAR,CAA4B,KAA5B,CAAmCL,QAAnC,CAAN,EAAP,CACD,CAjBD,CAiBG,CAACX,kBAAD,CAAqBZ,GAArB,CAjBH,EAmBA,MAAO,CACLmB,eAAe,CAAfA,eADK,CAAP,CAGD","sourcesContent":["import * as React from 'react';\nimport { Linking } from 'react-native';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/core';\n\ntype Config = {\n  [routeName: string]:\n    | string\n    | { path: string; parse?: Record<string, (value: string) => any> };\n};\n\ntype Options = {\n  /**\n   * The prefixes are stripped from the URL before parsing them.\n   * Usually they are the `scheme` + `host` (e.g. `myapp://chat?user=jane`)\n   */\n  prefixes: string[];\n  /**\n   * Config to fine-tune how to parse the path.\n   *\n   * Example:\n   * ```js\n   * {\n   *   Chat: {\n   *     path: 'chat/:author/:id',\n   *     parse: { id: Number }\n   *   }\n   * }\n   * ```\n   */\n  config?: Config;\n  /**\n   * Custom function to parse the URL object to a valid navigation state (advanced).\n   */\n  getStateFromPath?: (\n    path: string,\n    options?: Config\n  ) => PartialState<NavigationState> | undefined;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  { prefixes, config, getStateFromPath = getStateFromPathDefault }: Options\n) {\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    const url = await Linking.getInitialURL();\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}